import { validateRequest } from "@/actions/authActions";
import CategoryPieChart from "@/components/chart/CategoryPieChart";
import ExpenseLineChart from "@/components/chart/ExpenseLineChart";
import MontlyExpBarChart from "@/components/chart/MontlyExpBarChart";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  getBalance,
  getMonthlyExpenses,
  getMonthlyIncome,
  getExpensesByCategory,
} from "@/lib/dbFunctions/db";
import { IncomeAndExpense } from "@/types/type";
import type { Metadata } from "next";

export const metadata: Metadata = {
  title: "Analytics",
  description: "Generated by create next app",
};

export default async function page() {
  const { user } = await validateRequest();

  if (!user) return null;

  const year = new Date();
  const firstOfYear = new Date(year.getFullYear(), 0, 1);

  const balance = await getBalance(user.id, firstOfYear.toLocaleDateString());

  const monthWiseExpenses = await getMonthlyExpenses(user.id);
  const monthWiseIncome = await getMonthlyIncome(user.id);

  const expensesByCategory = await getExpensesByCategory(user.id);

  const monthOrder = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];

  const monthsSet = new Set([
    ...monthWiseIncome.map((item) => item.month),
    ...monthWiseExpenses.map((item) => item.month),
  ]);
  const combinedArray: IncomeAndExpense[] = [];

  monthsSet.forEach((month) => {
    const incomeItem = monthWiseIncome.find((item) => item.month === month);
    const expenseItem = monthWiseExpenses.find((item) => item.month === month);
    const totalIncome = incomeItem ? parseInt(incomeItem.amount!) : 0;
    const totalExpense = expenseItem ? parseInt(expenseItem.amount!) : 0;

    combinedArray.push({
      name: month, // You can change this to any desired name
      income: totalIncome,
      expense: totalExpense,
    });
  });

  combinedArray.sort(
    (a, b) => monthOrder.indexOf(a.name) - monthOrder.indexOf(b.name)
  );

  const totalAmount = expensesByCategory.reduce(
    (acc, item) => acc + parseInt(item.amount!),
    0
  );

  const percentages = expensesByCategory.map((item) => ({
    name: item.category!,
    amount: parseInt(item.amount!),
    percentage: parseFloat(
      ((parseInt(item.amount!) / totalAmount) * 100).toFixed(2)
    ),
  }));

  return (
    <>
      <div className="flex flex-col p-4 max-w-screen-xl mx-auto">
        <h3>Analytics</h3>

        <div className="grid grid-cols-1 md:grid-cols-4 md:grid-rows-4 gap-4">
          {/* Balance Card */}
          <Card className="rounded-lg md:row-span-2">
            <CardHeader>
              <CardDescription>Balance for this year</CardDescription>
              <CardTitle>â‚¹{balance}</CardTitle>
            </CardHeader>
          </Card>

          {/* Income vs Expense Card  */}
          <Card className="rounded-lg md:col-span-2 md:row-span-2">
            <CardHeader>
              <CardDescription>Line Chart</CardDescription>
              <CardTitle>Income vs Expense</CardTitle>
              <CardContent className="p-6 overflow-x-auto ">
                <ExpenseLineChart incomeAndExpense={combinedArray} />
              </CardContent>
            </CardHeader>
          </Card>

          <Card className="rounded-lg md:row-span-2 md:col-start-4">
            <CardHeader>
              <CardTitle className="text-muted-foreground">
                New Chart For Analytics Comming Soon...
              </CardTitle>
            </CardHeader>
          </Card>

          {/* Bar chart */}
          <Card className="rounded-lg md:col-span-2 md:row-span-2 md:row-start-3">
            <CardHeader>
              <CardDescription>Bar Chart</CardDescription>
              <CardTitle>Monthly Expenses</CardTitle>
            </CardHeader>
            <CardContent className="p-6 overflow-x-auto">
              <MontlyExpBarChart monthExpenseData={monthWiseExpenses} />
            </CardContent>
          </Card>

          {/* spending by category */}
          <Card className="rounded-lg md:col-span-2 md:row-span-2 md:col-start-3 md:row-start-3">
            <CardHeader>
              <CardDescription>Pie Chart</CardDescription>
              <CardTitle>Spending by Category</CardTitle>
            </CardHeader>
            <CardContent className="p-6 overflow-x-auto">
              <CategoryPieChart data={percentages} />
            </CardContent>
          </Card>
        </div>
      </div>
    </>
  );
}
